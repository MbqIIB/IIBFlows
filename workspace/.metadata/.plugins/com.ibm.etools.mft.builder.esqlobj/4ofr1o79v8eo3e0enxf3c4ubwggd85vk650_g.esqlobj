/*EATE FUNCTION Main() RETURNS BOOLE*/
		
	BEGIN
		CALL ExtractEnvelope();
		RETURN FALSE;
	END;
	
	
	CREATE PROCEDURE ExtractEnvelope() BEGIN

		SET OutputRoot.XMLNSC = InputRoot.XMLNSC;
		
		IF EXISTS(InputRoot.MQMD[]) THEN	
			SET Environment.MQMD = InputRoot.MQMD;
			IF EXISTS(InputRoot.MQRFH2[]) THEN	
				SET Environment.MQRFH2 = InputRoot.MQRFH2;
			END IF;						
		END IF;		
		
		DECLARE refOutEnvelope REFERENCE TO OutputRoot.XMLNSC.esbenv:Envelope;
		DETACH refOutEnvelope;
			DECLARE I INTEGER 1;
			DECLARE J INTEGER;
			DECLARE ResponseRef REFERENCE TO Environment;

			SET J = CARDINALITY(InputRoot.XMLNSC.esbenv:Envelope.esbhdr:Header.*[]);

			WHILE I <= J DO
				IF CONTAINS(FIELDVALUE(InputRoot.XMLNSC.esbenv:Envelope.esbhdr:Header.*[I]), 'http://') THEN
					--Do Nothing
				ELSE
					IF CARDINALITY(InputRoot.XMLNSC.esbenv:Envelope.esbhdr:Header.*[I].*[]) > 0 THEN
						
						CREATE LASTCHILD OF Environment.Header AS ResponseRef NAMESPACE esbhdr 
							NAME FIELDNAME(InputRoot.XMLNSC.esbenv:Envelope.esbhdr:Header.*[I]);
						SET ResponseRef.(XMLNSC.Attribute)xmlns = esbhdr;
						SET ResponseRef = InputRoot.XMLNSC.esbenv:Envelope.esbhdr:Header.*[I];
					ELSE
						CREATE LASTCHILD OF Environment.Header AS ResponseRef NAMESPACE esbhdr 
							NAME FIELDNAME(InputRoot.XMLNSC.esbenv:Envelope.esbhdr:Header.*[I]) 
								VALUE FIELDVALUE(InputRoot.XMLNSC.esbenv:Envelope.esbhdr:Header.*[I]);
						SET ResponseRef.(XMLNSC.Attribute)xmlns = esbhdr;
					END IF;
				END IF;
				SET I = I + 1;
			END WHILE;

		
		CASE FIELDNAME(InputRoot.XMLNSC.esbenv:Envelope.*[<])
			WHEN 'Body' THEN 
				SET OutputRoot.XMLNSC = InputRoot.XMLNSC.esbenv:Envelope.esbenv:Body;
				PROPAGATE;
			WHEN 'Error' THEN 
				SET OutputRoot.XMLNSC.esberr:Error = InputRoot.XMLNSC.esbenv:Envelope.esberr:Error;
				PROPAGATE TO TERMINAL 'out1' DELETE NONE;
			ELSE 	
				THROW USER EXCEPTION VALUES('Invalid ESB Envelope Structure'); 
		END CASE;			
	
	
	
	
	
	
		
	END;
