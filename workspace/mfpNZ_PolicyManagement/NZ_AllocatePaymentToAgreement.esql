/***********************************************************************************************************************************************************************/
/*  New Zealand Allocate Payment to Agreement Request                                                                                                                  */
/*  This flow sends a request to ORS to receipt a payment (the payment was already taken via DPS - NZ's payment gateway) against a policy.                             */
/*  The response is returned to the NZ_PolicyManagement gateway messageflow, which replies to the consumer.                                                            */
/*                                                                                                                                                                     */
/*  Author: Paul Milburn                                                                                                                                               */
/*  Date:   November 2012                                                                                                                                              */
/*  Project        Date        Name           Description                                                                                                              */
/*  WRK125689-02   13/08/2013  Mick Moriarty  Amended to cater for amendments from NZ, for Online Payments                                                             */
/***********************************************************************************************************************************************************************/
-- Keywords Start
-- $MQSI_URL= $URL: http://sdc1as356:8080/svn/integration/branches/NZ_State_Integration/mfpNZ_PolicyManagement/NZ_AllocatePaymentToAgreement.esql $ SVN Path MQSI$
-- $MQSI_Author= $Author: auiag\s45276 $ Developers name MQSI$
-- $MQSI_Version=$Revision: 4285 $ MQSI$
-- Keywords End

CREATE COMPUTE MODULE NZ_AllocatePaymentToAgreement_Request
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN

		CALL BuildAllocatePaymentToAgreementRequestHdr();
		CALL BuildAllocatePaymentToAgreementRequestBody();
		
		RETURN TRUE;
	END;
/***********************************************************************************************************************************************************************/
CREATE PROCEDURE BuildAllocatePaymentToAgreementRequestHdr() BEGIN

-- Copy ESB headers to Environment.
		CREATE LASTCHILD OF Environment 		DOMAIN 'XMLNSC' NAME 'Header';	
		SET Environment.Header 					= InputRoot.XMLNSC.ser:AllocatePaymentToAgreementSoapIn.Header;								
		SET Environment.Msgid 					= InputRoot.MQMD.MsgId;			
-- Save Reply to Queue for the response		
	 	SET Environment.REPLY_TO_QUEUE 			= InputRoot.MQMD.ReplyToQ;	
		SET Environment.REPLY_TO_QUEUE_MANAGER	= InputRoot.MQMD.ReplyToQMgr;	
-- Setup output request headers 
		SET OutputRoot.Properties.MessageSet 	= 'CMD0KPC002001'; 
		SET OutputRoot.Properties.MessageType 	= 'msg_IMS_OREC_REQUEST';
		SET OutputRoot.Properties.MessageFormat = 'Binary1';
-- Build MQMD					
 		CREATE NEXTSIBLING OF OutputRoot.Properties DOMAIN 'MQMD';
 		DECLARE refOut REFERENCE TO OutputRoot.MQMD;		
 		CALL Build_MQMD_Header (refOut, InputRoot.MQMD.CorrelId,' ',' ');			
 		
-- Build MRM 
		CREATE LASTCHILD OF OutputRoot DOMAIN 'MRM';

END;
/***********************************************************************************************************************************************************************/	
CREATE PROCEDURE BuildAllocatePaymentToAgreementRequestBody() BEGIN
	
		DECLARE inRef 				REFERENCE TO InputRoot.XMLNSC.ser:AllocatePaymentToAgreementSoapIn.Payload.AllocatePaymentToAgreement;		
		DECLARE chrCurrentTimeStamp CHAR;
		DECLARE chrCCYY             CHAR;
		DECLARE chrMM               CHAR;
		DECLARE chrDD               CHAR;
		DECLARE policy				CHAR;

		SET chrCurrentTimeStamp = CAST(CURRENT_TIMESTAMP AS CHAR);
		SET chrCCYY = SUBSTRING(chrCurrentTimeStamp FROM 12 FOR 4);
		SET chrMM   = SUBSTRING(chrCurrentTimeStamp FROM 17 FOR 2);
		SET chrDD   = SUBSTRING(chrCurrentTimeStamp FROM 20 FOR 2);	
		
		SET OutputRoot.MRM.RRQ_LL					= 272;
		SET OutputRoot.MRM.RRQ_TRAN_CODE			= 'ITBOREC0';
		SET OutputRoot.MRM.OREC_REQUEST_COMMON_AREA.RRQ_USER_ID = 'OLNZ';
		SET OutputRoot.MRM.OREC_REQUEST_COMMON_AREA.RRQ_OREC_ID = inRef.ns:paymentToBeApplied.ns:authorisationId;
		SET OutputRoot.MRM.OREC_REQUEST_COMMON_AREA.RRQ_CARD_DETAILS.RRQ_SETTLE_DATE = chrDD || '.' || chrMM || '.' || chrCCYY;
		SET OutputRoot.MRM.OREC_REQUEST_COMMON_AREA.RRQ_EFTPOS_DETAILS.RRQ_TENDERED_EFTPOS = inRef.ns:paymentToBeApplied.ns:amount.ns:theAmount;
		SET OutputRoot.MRM.OREC_REQUEST_COMMON_AREA.RRQ_EFTPOS_DETAILS.RRQ_EFTPOS_TERM_REF = inRef.ns:paymentToBeApplied.ns:authorisationId;
		SET OutputRoot.MRM.OREC_REQUEST_COMMON_AREA.RRQ_PRINT_OVERRIDE = 'N';
		SET OutputRoot.MRM.OREC_REQUEST_COMMON_AREA.RRQ_P_LMT = 01;
		SET OutputRoot.MRM.OREC_REQUEST_VAR_AREA.RRQ_PAYMENT_DTLS.RRQ_REF_NUM = inRef.ns:insurancePolicy.ns:objectReference.ns:objectId;
		SET OutputRoot.MRM.OREC_REQUEST_VAR_AREA.RRQ_PAYMENT_DTLS.RRQ_TRAN_AMT = inRef.ns:paymentToBeApplied.ns:amount.ns:theAmount;

-- Online Payments - WRK125689
		/*
		Status is Renewal - set as '03 '
		Status is neither 'Renewal', 'New Business', '' - reject
		All other values, set as '02 '
		*/

		-- get the status, if we are not 'New Business' or 'Renewal' - then reject
		declare refInSt reference to inRef.ns:insurancePolicy.ns:status;
		declare strState character '';
		if lastmove(refInSt) then
			set strState = fieldvalue(refInSt.ns:state);
			if strState not in ('', 'New Business', 'Renewal') then
				propagate to terminal 'out1';
			end if;
		end if;

		-- set Transaction Type for ORS to the default of '02 ' - New Business		
		declare strTranType character '';
		set strTranType = '02 ';
		if (strState = 'Renewal') then
			set strTranType = '03 ';
		end if;

		-- set the tran type value
		set OutputRoot.MRM.OREC_REQUEST_VAR_AREA.RRQ_PAYMENT_DTLS.RRQ_TRAN_TYPE = strTranType;
		
	 
END; 

END MODULE;
/***********************************************************************************************************************************************************************/	
CREATE COMPUTE MODULE NZ_AllocatePaymentToAgreement_Response
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
	    IF InputRoot.MRM.RRL_COMMON_BLOCK.RRL_RETURN_CODE <> '0' THEN
	    	SET Environment.errNo = InputRoot.MRM.RRL_COMMON_BLOCK.RRL_RETURN_NUMBER;
	    	PROPAGATE TO TERMINAL 'out1';
		END IF;
		
		CALL BuildAllocatePaymentToAgreementResponseHdr();
		CALL BuildAllocatePaymentToAgreementResponseBody();	
-- Set destination list		
		SET OutputLocalEnvironment.Destination.MQ.DestinationData.queueManagerName 	= Environment.REPLY_TO_QUEUE_MANAGER;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData.queueName 		= Environment.REPLY_TO_QUEUE;			
			
		RETURN TRUE;
	END;
/***********************************************************************************************************************************************************************/	
CREATE PROCEDURE BuildAllocatePaymentToAgreementResponseHdr() BEGIN
		DECLARE refIn  REFERENCE TO InputRoot.MRM.RP_HEADER; 
-- Build MQMD					
 		CREATE NEXTSIBLING OF OutputRoot.Properties DOMAIN 'MQMD';
 		DECLARE refOut REFERENCE TO OutputRoot.MQMD;					
 		CALL Build_MQMD_Header (refOut, Environment.Msgid,Environment.REPLY_TO_QUEUE,Environment.REPLY_TO_QUEUE_MANAGER);			   
-- Create HTTP Header   		 
   		SET OutputRoot.HTTPReplyHeader					= Environment.HTTP;
-- Create Allocate Payment To Agreement XML Response Header   		 
   		CREATE LASTCHILD OF OutputRoot AS refOut DOMAIN 'XMLNSC' NAME 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC AS refOut		NAMESPACE ser NAME 'AllocatePaymentToAgreementResponseSoapOut';	
		CALL Build_XML_Response_Header (refOut, 'ALLOCATE_PAYMENT_TO_AGREEMENT', Environment.Header,refIn);					
	END;

/***********************************************************************************************************************************************************************/
CREATE PROCEDURE BuildAllocatePaymentToAgreementResponseBody() BEGIN

		DECLARE ResponseRef 	REFERENCE TO OutputRoot.XMLNSC.ser:"AllocatePaymentToAgreementResponseSoapOut";	

-- Create xml parents 
			CREATE LASTCHILD OF ResponseRef AS ResponseRef 						NAME 'Payload';
			CREATE LASTCHILD OF ResponseRef AS ResponseRef 						NAME 'AllocatePaymentToAgreementResponse';
			CREATE LASTCHILD OF ResponseRef AS ResponseRef 						NAMESPACE ns NAME 'remittance';
			SET ResponseRef.(XMLNSC.Attribute)xmlns								=ns;
			
			MOVE ResponseRef TO OutputRoot.XMLNSC.ser:"AllocatePaymentToAgreementResponseSoapOut".Payload.AllocatePaymentToAgreementResponse.remittance;
			
-- Set receipt number	
			CREATE LASTCHILD OF ResponseRef AS ResponseRef						NAMESPACE ns NAME 'objectReference';
 			CREATE LASTCHILD OF ResponseRef AS ResponseRef 						NAMESPACE ns NAME 'objectId'		  	VALUE InputRoot.MRM.RRL_VARIABLE_BLOCK.RRL_RECEIPT_DTLS.RRL_RECEIPT_NUMBER;			
	
	END;    
END MODULE;
/***********************************************************************************************************************************************************************/
CREATE COMPUTE MODULE NZ_AllocatePaymentToAgreement_Error
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN	
		DECLARE start 			REFERENCE TO InputExceptionList.*[1];	  
-- Create HTTP Header   		 
   		SET OutputRoot.HTTPReplyHeader						= Environment.HTTP;	
-- Build MQMD					
 		CREATE NEXTSIBLING OF OutputRoot.Properties DOMAIN 'MQMD';
 		DECLARE refOut REFERENCE TO OutputRoot.MQMD;					
 		CALL Build_MQMD_Header (refOut, Environment.Msgid,Environment.REPLY_TO_QUEUE,Environment.REPLY_TO_QUEUE_MANAGER);	
-- HTTP Header		
		SET Environment.HTTP											= InputRoot.HTTPInputHeader;		
		SET OutputRoot.XMLNSC.ser:"AllocatePaymentToAgreementResponseSoapOut".ResponseHeader.Header 						= InputRoot.XMLNSC.ser:AllocatePaymentToAgreementSoapIn.Header;
		SET OutputRoot.XMLNSC.ser:"AllocatePaymentToAgreementResponseSoapOut".ResponseHeader.maxReturnLevel 				= 'ERROR';
		SET OutputRoot.XMLNSC.ser:"AllocatePaymentToAgreementResponseSoapOut".ResponseHeader.errorList.errorInfo.level 		= 'ERROR';
		SET OutputRoot.XMLNSC.ser:"AllocatePaymentToAgreementResponseSoapOut".ResponseHeader.errorList.errorInfo.system 	= 'WMB';				
-- Map Error code in ResponseHeader 		
		WHILE start.Number IS NOT NULL DO 
			IF start.Number = 9999 THEN	
				SET OutputRoot.XMLNSC.ser:"AllocatePaymentToAgreementResponseSoapOut".ResponseHeader.errorList.errorInfo.code 			= Environment.errNo;
				CASE Environment.errNo
					WHEN 129 THEN
						SET OutputRoot.XMLNSC.ser:"AllocatePaymentToAgreementResponseSoapOut".ResponseHeader.errorList.errorInfo.message 	= 'Invalid Policy Number';
					WHEN 131 THEN	
						SET OutputRoot.XMLNSC.ser:"AllocatePaymentToAgreementResponseSoapOut".ResponseHeader.errorList.errorInfo.message 	= 'Amount not sufficient';
					WHEN 152 THEN	
						SET OutputRoot.XMLNSC.ser:"AllocatePaymentToAgreementResponseSoapOut".ResponseHeader.errorList.errorInfo.message 	= 'Amount to be receipted is outside allowable tolerance';
					WHEN 167 THEN	
						SET OutputRoot.XMLNSC.ser:"AllocatePaymentToAgreementResponseSoapOut".ResponseHeader.errorList.errorInfo.message 	= 'Policy notations/conditions exist';
					WHEN 168 THEN	
						SET OutputRoot.XMLNSC.ser:"AllocatePaymentToAgreementResponseSoapOut".ResponseHeader.errorList.errorInfo.message 	= 'Signature required';
					WHEN 169 THEN	
						SET OutputRoot.XMLNSC.ser:"AllocatePaymentToAgreementResponseSoapOut".ResponseHeader.errorList.errorInfo.message 	= 'Additional Security required';
					WHEN 170 THEN	
						SET OutputRoot.XMLNSC.ser:"AllocatePaymentToAgreementResponseSoapOut".ResponseHeader.errorList.errorInfo.message 	= 'Valuation required';
					WHEN 171 THEN	
						SET OutputRoot.XMLNSC.ser:"AllocatePaymentToAgreementResponseSoapOut".ResponseHeader.errorList.errorInfo.message 	= 'Inspection required';
					WHEN 172 THEN	
						SET OutputRoot.XMLNSC.ser:"AllocatePaymentToAgreementResponseSoapOut".ResponseHeader.errorList.errorInfo.message 	= 'NCB verification required';
					WHEN 134 THEN	
						SET OutputRoot.XMLNSC.ser:"AllocatePaymentToAgreementResponseSoapOut".ResponseHeader.errorList.errorInfo.message 	= 'Policy Cancelled/Lapsed/Incomplete';
					WHEN 174 THEN	
						SET OutputRoot.XMLNSC.ser:"AllocatePaymentToAgreementResponseSoapOut".ResponseHeader.errorList.errorInfo.message 	= 'Policy is locked - refer to your support area';
					WHEN 175 THEN	
						SET OutputRoot.XMLNSC.ser:"AllocatePaymentToAgreementResponseSoapOut".ResponseHeader.errorList.errorInfo.message 	= 'Policy awaiting authorisation - refer to your support area';
					WHEN 176 THEN	
						SET OutputRoot.XMLNSC.ser:"AllocatePaymentToAgreementResponseSoapOut".ResponseHeader.errorList.errorInfo.message 	= 'Amount outstanding in previous period';
					WHEN 342 THEN	
						SET OutputRoot.XMLNSC.ser:"AllocatePaymentToAgreementResponseSoapOut".ResponseHeader.errorList.errorInfo.message 	= 'Amount must equal total amount';
					WHEN 346 THEN 	
						SET OutputRoot.XMLNSC.ser:"AllocatePaymentToAgreementResponseSoapOut".ResponseHeader.errorList.errorInfo.message 	= 'EFTPOS reference is blank';
					WHEN 384 THEN	
						SET OutputRoot.XMLNSC.ser:"AllocatePaymentToAgreementResponseSoapOut".ResponseHeader.errorList.errorInfo.message 	= 'Duplicate receipt not allowed. Pending receipt exists';
					WHEN 798 THEN	
						SET OutputRoot.XMLNSC.ser:"AllocatePaymentToAgreementResponseSoapOut".ResponseHeader.errorList.errorInfo.message 	= 'Duplicate receipt id. DPS number is not unique';
					WHEN 006 THEN	
						SET OutputRoot.XMLNSC.ser:"AllocatePaymentToAgreementResponseSoapOut".ResponseHeader.errorList.errorInfo.message 	= 'Amount entered is not numeric';
				END CASE;
			ELSE	
				case start.Number
					when 3001 then
						SET OutputRoot.XMLNSC.ser:"AllocatePaymentToAgreementResponseSoapOut".ResponseHeader.errorList.errorInfo.code 		= 'PE04';
						SET OutputRoot.XMLNSC.ser:"AllocatePaymentToAgreementResponseSoapOut".ResponseHeader.errorList.errorInfo.message 	= 'Allocate Payment To Agreement Call Exception';
						
					when 3002 then
						SET OutputRoot.XMLNSC.ser:"AllocatePaymentToAgreementResponseSoapOut".ResponseHeader.errorList.errorInfo.code 		= 'PE03';
						SET OutputRoot.XMLNSC.ser:"AllocatePaymentToAgreementResponseSoapOut".ResponseHeader.errorList.errorInfo.message 	= 'Allocate Payment To Agreement Timeout';				
						
					when 3003 then
						SET OutputRoot.XMLNSC.ser:"AllocatePaymentToAgreementResponseSoapOut".ResponseHeader.errorList.errorInfo.code 		= 'PE05';
						SET OutputRoot.XMLNSC.ser:"AllocatePaymentToAgreementResponseSoapOut".ResponseHeader.errorList.errorInfo.message 	= 'Invalid Policy Status';				
						
				end case;



			END IF;	
-- Move start to the last child of the field to which it currently points 
				MOVE start LASTCHILD;
		END WHILE;					
-- 	Set destination				
		SET OutputLocalEnvironment.Destination.MQ.DestinationData.queueManagerName 	= InputRoot.MQMD.ReplyToQMgr;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData.queueName 		= InputRoot.MQMD.ReplyToQ;	

	END;
END MODULE; 

