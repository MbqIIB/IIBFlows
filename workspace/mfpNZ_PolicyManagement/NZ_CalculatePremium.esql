/***********************************************************************************************************************************************************************/
/*  New Zealand Calculate Premium Request                                                                                                                              */
/*  This flow requests the underwrite and price service on HUON (NDS010) via the MQ Adaptor (WQS080).                                                                  */
/*  The response is returned to the NZ_PolicyManagement gateway messageflow, which replys to the consumer.                                                             */
/*                                                                                                                                                                     */
/*  Author: Paul Milburn                                                                                                                                               */
/*  Date:   24th July 2012                                                                                                                                             */
/***********************************************************************************************************************************************************************/
-- Keywords Start
-- $MQSI_URL= $URL: http://sdc1as356:8080/svn/integration/branches/NZ_State_Integration/mfpNZ_PolicyManagement/NZ_CalculatePremium.esql $ SVN Path MQSI$
-- $MQSI_Author= $Author: auiag\s45276 $ Developers name MQSI$
-- $MQSI_Version=$Revision: 4285 $ MQSI$
-- Keywords End

CREATE COMPUTE MODULE NZ_CalculatePremium_Request
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN

		CALL BuildCalculatePremiumRequestHdr();
		CALL BuildCalculatePremiumRequestBody();
		
		RETURN TRUE;
	END;
/***********************************************************************************************************************************************************************/
CREATE PROCEDURE BuildCalculatePremiumRequestHdr() BEGIN

-- Copy ESB headers to Environment.
		CREATE LASTCHILD OF Environment 		DOMAIN 'XMLNSC' NAME 'Header';	
		SET Environment.Header 					= InputRoot.XMLNSC.ser:CalculatePremiumSoapIn.Header;								
		SET Environment.Msgid 					= InputRoot.MQMD.MsgId;			
-- Save Reply to Queue for the response		
	 	SET Environment.REPLY_TO_QUEUE 			= InputRoot.MQMD.ReplyToQ;	
   		SET Environment.REPLY_TO_QUEUE_MANAGER	= InputRoot.MQMD.ReplyToQMgr;	
-- Setup output request headers 
		SET OutputRoot.Properties.MessageSet 	= 'F0H2ASG002001'; 
		SET OutputRoot.Properties.MessageType 	= 'msg_WQL080RQ';
		SET OutputRoot.Properties.MessageFormat = 'Binary1';
-- Build MQMD					
 		CREATE NEXTSIBLING OF OutputRoot.Properties DOMAIN 'MQMD';
 		DECLARE refOut REFERENCE TO OutputRoot.MQMD;		
 		CALL Build_MQMD_Header (refOut, InputRoot.MQMD.CorrelId,' ',' ');			
-- Build MRM Header
		CREATE LASTCHILD OF OutputRoot DOMAIN 'MRM';
		MOVE refOut	 TO OutputRoot.MRM;
		DECLARE refInput			   REFERENCE TO InputRoot.XMLNSC.ser:"CalculatePremiumSoapIn";				
		CALL Build_MRM_Header (refOut, 'WQL080RQ', refInput);		

END;
/***********************************************************************************************************************************************************************/	
CREATE PROCEDURE BuildCalculatePremiumRequestBody() BEGIN
	
		DECLARE Adx 			INTEGER 0;	
		DECLARE Cdx 			INTEGER 0;			
		DECLARE Ddx 			INTEGER 1;	
		DECLARE Idx 			INTEGER 1;
		DECLARE Odx 			INTEGER 1;
		DECLARE Pdx 			INTEGER 0;
		DECLARE Mdx 			INTEGER 0;
		DECLARE Qdx 			INTEGER 0;
		DECLARE Driver	 		CHAR 'D';
		DECLARE Owner	 		CHAR 'O';							
		DECLARE inRef 			REFERENCE TO InputRoot.XMLNSC.ser:CalculatePremiumSoapIn.Payload.CalculatePremium;		
		DECLARE COVERAGE		REFERENCE TO inRef.ns:insurancePolicy.ns:contractComponents;
		DECLARE RISKTYPE        REFERENCE TO inRef.ns:insurancePolicy.ns:contractComponents.ns:contractSpecification;				
		DECLARE AUTOMOBILE 		REFERENCE TO COVERAGE;			
		DECLARE DRIVERS			REFERENCE TO COVERAGE;	
		DECLARE POLICY_HOLDER 	REFERENCE TO COVERAGE;				
		DECLARE ROLE_IN_FSA 	REFERENCE TO COVERAGE;
		DECLARE VEHICLE 		REFERENCE TO COVERAGE;
		DECLARE VEHICLE_MODEL 	REFERENCE TO COVERAGE;
		DECLARE RISK_LOCATION  	REFERENCE TO COVERAGE;
		DECLARE PLACES		  	REFERENCE TO COVERAGE;	
		DECLARE SUBURB		  	REFERENCE TO COVERAGE;
		DECLARE SUM_INSURED	  	REFERENCE TO COVERAGE;		
		DECLARE DISCOUNTS	  	REFERENCE TO COVERAGE;
		DECLARE EXTENSIONS	  	REFERENCE TO COVERAGE;
		DECLARE VEHICLE_MODS  	REFERENCE TO COVERAGE;	
		DECLARE VEHICLE_DAMAGE 	REFERENCE TO COVERAGE;	
											

-- Navigate to Coverages 
		CALL getXTree(COVERAGE, 'CoverageComponent');
		
		SET OutputRoot.MRM.RQ_BODY.RQ_OPERATION							= 'PRICE';
		SET OutputRoot.MRM.RQ_BODY.RQ_DISTRIBUTOR						= 'STATE';	

  		SET OutputRoot.MRM.RQ_BODY.RQ_RISKTYPE							= RISKTYPE.ns:kind;

		SET OutputRoot.MRM.RQ_BODY.RQ_EFFECTDTE							= CAST((DateFunc.ConvertDateToCCYYMMDD(CAST(inRef.ns:effectiveDate AS CHAR))) AS INT);															

-- Navigate to Suburb 
		SET OutputRoot.MRM.RQ_BODY.RQ_RISK_ADDRESS.RQ_SUBURB			= '';

		CALL getXTree(RISK_LOCATION, 'PlaceInvolvedInContract');
		
		MOVE PLACES TO RISK_LOCATION.ns:place;
		MOVE PLACES TO PLACES.ns:relatedPlaces;
		WHILE LASTMOVE(PLACES) DO
  			IF PLACES.ns:administrativeLevel = 'Region' THEN
				SET OutputRoot.MRM.RQ_BODY.RQ_RISK_ADDRESS.RQ_SUBURB			= PLACES.ns:names;
  				MOVE SUBURB TO PLACES.ns:relatedPlaces;
  				IF SUBURB.ns:names <> '' THEN
					SET OutputRoot.MRM.RQ_BODY.RQ_RISK_ADDRESS.RQ_SUBURB		= SUBURB.ns:names;
  				END IF;	
			ELSE		
  				IF PLACES.ns:administrativeLevel = 'Postal' THEN 
  					SET OutputRoot.MRM.RQ_BODY.RQ_RISK_ADDRESS.RQ_POSTCODE		= PLACES.ns:names;
  				END IF;	
  			END IF;		
			MOVE PLACES NEXTSIBLING REPEAT NAME;			
		END WHILE; 
		
		SET OutputRoot.MRM.RQ_BODY.RQ_RISK_ADDRESS.RQ_COUNTRY		= 'NZL';	
		SET OutputRoot.MRM.RQ_BODY.RQ_RISK_ADDRESS.RQ_STATE			= 'NZL';																											

-- Navigate to Policy Holder / Owners
		DELETE FIELD Environment.getXTreeMany;							
		MOVE POLICY_HOLDER TO inRef.ns:insurancePolicy;
		CALL getXTreeMany(POLICY_HOLDER, 'Policyholder');				

-- Map Policy Holders Owners. NOTE: variables Ddx,Odx,Cdx,Pdx,Idx and Adx are shared between Policy Holder Drivers and Additional Drivers
		SET Adx 															= CARDINALITY(POLICY_HOLDER.*[]);	
		MOVE POLICY_HOLDER TO POLICY_HOLDER.Policyholder;
		WHILE LASTMOVE(POLICY_HOLDER) DO
			CALL Drivers(POLICY_HOLDER,Ddx,Odx,Cdx,Pdx,Qdx,Idx,Adx,Owner);
			SET Idx = Idx + 1;					
			MOVE POLICY_HOLDER NEXTSIBLING REPEAT NAME;			
		END WHILE; 
		
-- Navigate to AutomobileCoverage	
		MOVE AUTOMOBILE TO COVERAGE.ns:contractComponents;
		CALL getXTree(AUTOMOBILE, 'AutomobileCoverage');	

-- Navigate to NamedDriver					
		DELETE FIELD Environment.getXTreeMany;
		MOVE DRIVERS TO AUTOMOBILE;
		CALL getXTreeMany(DRIVERS, 'NamedDriver');			

-- Map Additional Drivers (Risks). NOTE: variables Ddx,Odx,Cdx,Pdx,Idx and Adx are shared between Policy Holder Drivers and Additional Drivers
		SET Adx 															= Adx + CARDINALITY(DRIVERS.*[]);	
		MOVE DRIVERS TO DRIVERS.NamedDriver;
		WHILE LASTMOVE(DRIVERS) DO
			CALL Drivers(DRIVERS,Ddx,Odx,Cdx,Pdx,Qdx,Idx,Adx,Driver);	
			SET Idx = Idx + 1;					
			MOVE DRIVERS NEXTSIBLING REPEAT NAME;			
		END WHILE; 
		
		SET OutputRoot.MRM.RQ_BODY.RQ_KNOCK_OUTS.RQ_OTHER_MODS 	= ' ';
		SET OutputRoot.MRM.RQ_BODY.RQ_KNOCK_OUTS.RQ_DAMAGES 	= ' ';

-- Navigate to FSA		
		MOVE ROLE_IN_FSA TO AUTOMOBILE;
		CALL getXTree(ROLE_IN_FSA, 'ObjectCoveredRoleInFsa');		

-- Navigate to Vehicle		
		MOVE VEHICLE TO ROLE_IN_FSA.ns:coveredPhysicalObjects;
		CALL getXTree(VEHICLE, 'Vehicle');	

-- Navigate to Vehicle Model
		IF VEHICLE.ns:vehicleModelSpecification.(XMLNSC.Attribute)xsi:type = 'AutomobileModel' THEN
			MOVE VEHICLE_MODEL TO VEHICLE.ns:vehicleModelSpecification;
			CALL getXTree(VEHICLE_MODEL, 'AutomobileModel');
		ELSE
			MOVE VEHICLE_MODEL TO VEHICLE.ns:vehicleModelSpecification;
			CALL getXTree(VEHICLE_MODEL, 'MotocycleModel');		
		END IF;						

-- Populate Vehicle ID								
		SET OutputRoot.MRM.RQ_BODY.RQ_MOTOR_RISK.RQ_VMSID			= COALESCE(VEHICLE_MODEL.ns:objectReference.ns:objectId,0);		

-- Navigate to Sum Insured		
		MOVE SUM_INSURED TO AUTOMOBILE;
		CALL getXTree(SUM_INSURED, 'MoneyProvisionInvolvedInContract');	
		
		IF SUM_INSURED.ns:rootType.ns:name = 'Sum Insured' THEN
			SET OutputRoot.MRM.RQ_BODY.RQ_MOTOR_RISK.RQ_AGRVALUE = SUM_INSURED.ns:moneyProvision.ns:moneyProvisionElements.ns:baseAmount.ns:theAmount;	
		END IF;

-- Set RATMOD1 if Immobiliser exists
		IF VEHICLE.ns:antiTheftDevice IS TRUE THEN
			SET OutputRoot.MRM.RQ_BODY.RQ_MOTOR_RISK.RQ_RATMOD1 = 'SIMA';				
		END IF;				
		  
-- Initialise MPD Indicator	
 		SET OutputRoot.MRM.RQ_BODY.RQ_MOTOR_RISK.RQ_MPDIND			= 'N';
 		
-- Set MPD Indicator if exists 	
		DELETE FIELD Environment.getXTreeMany;	
		MOVE DISCOUNTS TO COVERAGE.ns:MoneyProvision;
		CALL getXTreeMany(DISCOUNTS, 'MoneyProvisionInvolvedInContract');	
		
		MOVE DISCOUNTS TO DISCOUNTS.MoneyProvisionInvolvedInContract;
		WHILE LASTMOVE(DISCOUNTS) DO
  			IF DISCOUNTS.ns:moneyProvision.ns:adjustments.ns:reason = 'Multi Policy' THEN
 				SET OutputRoot.MRM.RQ_BODY.RQ_MOTOR_RISK.RQ_MPDIND			= '1';
  			END IF;		
			MOVE DISCOUNTS NEXTSIBLING REPEAT NAME;			
		END WHILE; 

-- Initialise Options Indicator	
 		SET OutputRoot.MRM.RQ_BODY.RQ_MOTOR_RISK.RQ_HIRECAROPT			= 'N';
 		SET OutputRoot.MRM.RQ_BODY.RQ_MOTOR_RISK.RQ_WSCRNOPT			= 'N';
 		SET OutputRoot.MRM.RQ_BODY.RQ_MOTOR_RISK.RQ_RDRESCUE			= 'N';
 							
-- Navigate to Extensions					
		DELETE FIELD Environment.getXTreeMany;
		MOVE EXTENSIONS TO AUTOMOBILE;
		CALL getXTreeMany(EXTENSIONS, 'Extension');				
		
		MOVE EXTENSIONS to EXTENSIONS.Extension;	
		WHILE LASTMOVE(EXTENSIONS) DO
  			IF EXTENSIONS.ns:contractSpecification.ns:name = 'Windscreen' THEN 
  				SET OutputRoot.MRM.RQ_BODY.RQ_MOTOR_RISK.RQ_WSCRNOPT			= 'Y';
  			END IF;	
  			IF EXTENSIONS.ns:contractSpecification.ns:name = 'Hire Car' THEN
				SET OutputRoot.MRM.RQ_BODY.RQ_MOTOR_RISK.RQ_HIRECAROPT			= 'Y';	
  			END IF;	
  			IF EXTENSIONS.ns:contractSpecification.ns:name = 'Roadside Rescue' THEN 
				SET OutputRoot.MRM.RQ_BODY.RQ_MOTOR_RISK.RQ_RDRESCUE			= 'Y';											
  			END IF;		
			MOVE EXTENSIONS NEXTSIBLING REPEAT NAME;			
		END WHILE; 
																					 				
-- Add Immobiliser to MODS if true
		IF VEHICLE.ns:antiTheftDevice IS TRUE THEN
			SET Mdx = 1;
			SET OutputRoot.MRM.RQ_BODY.RQ_MODS.RQ_MODS_CNT = Mdx;
			SET OutputRoot.MRM.RQ_BODY.RQ_MODS.RQ_MODS_DTL[Mdx].RQ_MODCODE = 'SIMA';
			SET OutputRoot.MRM.RQ_BODY.RQ_MODS.RQ_MODS_DTL[Mdx].RQ_RATED = 'Y';
			SET OutputRoot.MRM.RQ_BODY.RQ_MODS.RQ_MODS_DTL[Mdx].RQ_PURFIT = 'P';	
			SET OutputRoot.MRM.RQ_BODY.RQ_MODS.RQ_MODS_DTL[Mdx].RQ_MODVALUE = 1;
		END IF;				

-- Navigate to Modifications
		MOVE VEHICLE_MODS TO VEHICLE.ns:modifications;
		WHILE LASTMOVE(VEHICLE_MODS) DO
  			IF VEHICLE_MODS.ns:rootType.ns:name = 'Non-Standard Wheels' THEN
				SET Mdx = Mdx + 1;			
				SET OutputRoot.MRM.RQ_BODY.RQ_MODS.RQ_MODS_CNT = Mdx;
				SET OutputRoot.MRM.RQ_BODY.RQ_MODS.RQ_MODS_DTL[Mdx].RQ_MODCODE = 'WHEL';
				SET OutputRoot.MRM.RQ_BODY.RQ_MODS.RQ_MODS_DTL[Mdx].RQ_MODVALUE = VEHICLE_MODS.ns:value.ns:theAmount;				
			END IF;	
  			IF VEHICLE_MODS.ns:rootType.ns:name = 'Other' THEN
				SET OutputRoot.MRM.RQ_BODY.RQ_KNOCK_OUTS.RQ_OTHER_MODS = 'Y';
			END IF;				
 			MOVE VEHICLE_MODS NEXTSIBLING REPEAT NAME;			
		END WHILE; 
		
-- Navigate to Damages
		MOVE VEHICLE_DAMAGE TO VEHICLE.ns:physicalConditions;
 		IF VEHICLE_DAMAGE.ns:conditionComponents.ns:description is not null THEN 					
			SET OutputRoot.MRM.RQ_BODY.RQ_KNOCK_OUTS.RQ_DAMAGES = 'Y';
 		END IF;		
 				
END; 

/***********************************************************************************************************************************************************************/ 
CREATE PROCEDURE Drivers(IN DRIVERS REFERENCE, INOUT Ddx INT, INOUT Odx INT, INOUT Cdx INT, INOUT Pdx INT, INOUT Qdx INT, INOUT Idx INT, IN Adx INT, IN DriverType CHAR) BEGIN
-- Common procedure to map policy owners who are drivers, and additional drivers (risks)							
		DECLARE DRIVING_EXP 	REFERENCE TO DRIVERS;
		DECLARE DRIVING_LIC 	REFERENCE TO DRIVERS;	
		DECLARE INCIDENTS 		REFERENCE TO DRIVERS;	
		DECLARE OFFENCES 		REFERENCE TO DRIVERS;	
		DECLARE PERSON 			REFERENCE TO DRIVERS;
		DECLARE REFUSALS 		REFERENCE TO DRIVERS;
		DECLARE Owner	 		CHAR 'O';											
		

		SET OutputRoot.MRM.RQ_BODY.RQ_DRIVERS.RQ_DRIVER_CNT										= Adx;				
		SET OutputRoot.MRM.RQ_BODY.RQ_DRIVERS.RQ_DRIVER_DTL[Idx].RQ_DRIVERSEQ					= COALESCE(DRIVERS.ns:objectReference.ns:objectId,0);
-- Customer ID (client number)	
		SET OutputRoot.MRM.RQ_BODY.RQ_DRIVERS.RQ_DRIVER_DTL[Idx].RQ_SEQCLTNO 					= COALESCE(DRIVERS.ns:rolePlayer.ns:objectReference.ns:objectId,0);		
		SET OutputRoot.MRM.RQ_BODY.RQ_DRIVERS.RQ_DRIVER_DTL[Idx].RQ_TYPEOFCLT					= 'I';	
		SET OutputRoot.MRM.RQ_BODY.RQ_DRIVERS.RQ_DRIVER_DTL[Idx].RQ_OWNER_DRIVER				= DriverType;										
-- Navigate to Person					
		MOVE PERSON TO DRIVERS;
		CALL getXTree(PERSON, 'Person');
-- Gender	
		SET OutputRoot.MRM.RQ_BODY.RQ_DRIVERS.RQ_DRIVER_DTL[Idx].RQ_GENDER = 
		    CASE PERSON.ns:gender
		    	WHEN 'Male'  THEN 'M'
		    	WHEN 'Female'  THEN 'F'
		    END;		
-- Date of Birth
		SET OutputRoot.MRM.RQ_BODY.RQ_DRIVERS.RQ_DRIVER_DTL[Idx].RQ_BIRTHDTE					= DateFunc.ConvertDateToCCYYMMDD(COALESCE(PERSON.ns:birthDate,'9999-12-31'));										
-- Navigate to Driving experience					
		MOVE DRIVING_EXP TO PERSON;
		CALL getXTree(DRIVING_EXP, 'Driving');			
		SET OutputRoot.MRM.RQ_BODY.RQ_DRIVERS.RQ_DRIVER_DTL[Idx].RQ_DRIVEXP						= COALESCE(DRIVING_EXP.ns:yearsDriving,0);
-- Navigate to Driving License				
		MOVE DRIVING_LIC TO PERSON;
		CALL getXTree(DRIVING_LIC, 'DrivingLicense');						
		SET OutputRoot.MRM.RQ_BODY.RQ_DRIVERS.RQ_DRIVER_DTL[Idx].RQ_LICTYPE						= COALESCE(DRIVING_LIC.ns:drivingLicenseType,' ');		
-- Navigate to Incidents	
		MOVE INCIDENTS TO PERSON;
		CALL getXTreeManyChild(INCIDENTS, 'RoadEvent');
		
		SET Cdx																					= Cdx + CARDINALITY(INCIDENTS.*[]);	
		SET OutputRoot.MRM.RQ_BODY.RQ_DRIVERS_INCIDENTS.RQ_INCDNT_CNT							= Cdx;	
-- Read through incidents							
		MOVE INCIDENTS TO INCIDENTS.RoadEvent;
		WHILE LASTMOVE(INCIDENTS) DO			
			SET OutputRoot.MRM.RQ_BODY.RQ_DRIVERS_INCIDENTS.RQ_INCDNT_DTL[Ddx].RQ_DRIVERSEQ		= COALESCE(DRIVERS.ns:objectReference.ns:objectId,0);	
			SET OutputRoot.MRM.RQ_BODY.RQ_DRIVERS_INCIDENTS.RQ_INCDNT_DTL[Ddx].RQ_SEQCLTNO 		= COALESCE(DRIVERS.ns:rolePlayer.ns:objectReference.ns:objectId,0);		
-- Format start date
			SET OutputRoot.MRM.RQ_BODY.RQ_DRIVERS_INCIDENTS.RQ_INCDNT_DTL[Ddx].RQ_LOSSDTE		= DateFunc.ConvertDateToCCYYMMDD(COALESCE(INCIDENTS.ns:startDate,'9999-12-31'));										
			SET OutputRoot.MRM.RQ_BODY.RQ_DRIVERS_INCIDENTS.RQ_INCDNT_DTL[Ddx].RQ_LOSSCDE		= COALESCE(INCIDENTS.ns:rootType.ns:name,0);																				
			SET Ddx = Ddx + 1;	
			MOVE INCIDENTS NEXTSIBLING REPEAT NAME;			
		END WHILE;
-- Navigate to Offences	
		MOVE OFFENCES TO PERSON;
		CALL getXTreeManyChild(OFFENCES, 'OffenceEvent');
		
		SET Pdx																					= Pdx + CARDINALITY(OFFENCES.*[]);	
		SET OutputRoot.MRM.RQ_BODY.RQ_DRIVERS_OFFENCES.RQ_OFFENCE_CNT							= Pdx;	
-- Read through Offences							
		MOVE OFFENCES TO OFFENCES.OffenceEvent;
		WHILE LASTMOVE(OFFENCES) DO			
			SET OutputRoot.MRM.RQ_BODY.RQ_DRIVERS_OFFENCES.RQ_OFFENCE_DTL[Odx].RQ_DRIVERSEQ		= COALESCE(DRIVERS.ns:objectReference.ns:objectId,0);
			SET OutputRoot.MRM.RQ_BODY.RQ_DRIVERS_OFFENCES.RQ_OFFENCE_DTL[Odx].RQ_SEQCLTNO 		= COALESCE(DRIVERS.ns:rolePlayer.ns:objectReference.ns:objectId,0);		
-- Format start date
			SET OutputRoot.MRM.RQ_BODY.RQ_DRIVERS_OFFENCES.RQ_OFFENCE_DTL[Odx].RQ_CONVCTDTE		= DateFunc.ConvertDateToCCYYMMDD(COALESCE(OFFENCES.ns:startDate,'9999-12-31'));										
			SET OutputRoot.MRM.RQ_BODY.RQ_DRIVERS_OFFENCES.RQ_OFFENCE_DTL[Odx].RQ_CONVCTCDE		= COALESCE(OFFENCES.ns:rootType.ns:name,'');																				
			SET Odx = Odx + 1;	
			MOVE OFFENCES NEXTSIBLING REPEAT NAME;			
		END WHILE; 
		
-- Check for criminal offence
		IF DriverType = Owner THEN
			MOVE OFFENCES TO PERSON;
			CALL getXTreeManyChild(OFFENCES, 'CriminalOffence');
			IF EXISTS (OFFENCES.CriminalOffence[]) THEN 
				SET OutputRoot.MRM.RQ_BODY.RQ_KNOCK_OUTS.RQ_OFFENCES = 'Y';	
			END IF;	
		END IF;
		
-- Navigate to Refusals	
		IF DriverType = Owner THEN
			MOVE REFUSALS TO PERSON;
			CALL getXTreeManyChild(REFUSALS, 'InsuranceEvent');
			MOVE REFUSALS TO REFUSALS.InsuranceEvent;
			WHILE LASTMOVE(REFUSALS) DO			
				IF REFUSALS.ns:startDate IS NULL THEN 
-- Refusal exists, if it contains no other details(for example 'start date') then it is an existence check and the respective knock-out flag needs to be set
					SET OutputRoot.MRM.RQ_BODY.RQ_KNOCK_OUTS.RQ_REFCANS = 'Y';	
				END IF;	
				MOVE REFUSALS NEXTSIBLING REPEAT NAME;			
			END WHILE; 
		END IF;		
   
END;	
/***********************************************************************************************************************************************************************/ 
CREATE PROCEDURE getXTree(
		INOUT ref REFERENCE,
		IN attribName CHAR
		) BEGIN
		
		CREATE LASTCHILD OF Environment.getXTree DOMAIN 'XMLNSC' NAME attribName;
		
		SET Environment.getXTree.{attribName} = THE (SELECT ITEM X
			FROM ref.[] AS X
			WHERE X.(XMLNSC.Attribute)xsi:type = attribName);
		MOVE ref TO Environment.getXTree.{attribName};
		END;
/***********************************************************************************************************************************************************************/ 
CREATE PROCEDURE getXTreeMany(
		INOUT ref REFERENCE,
		IN attribName CHAR
		) BEGIN

		CREATE LASTCHILD OF Environment.getXTreeMany DOMAIN 'XMLNSC' NAME attribName;
		
		SET Environment.getXTreeMany.{attribName}[] = SELECT ITEM X
			FROM ref.[] AS X
			WHERE X.(XMLNSC.Attribute)xsi:type = attribName;
		MOVE ref TO Environment.getXTreeMany;
		END;
/***********************************************************************************************************************************************************************/ 
CREATE PROCEDURE getXTreeManyChild(
		INOUT ref REFERENCE,
		IN attribName CHAR
		) BEGIN
			
		DELETE FIELD Environment.getXTreeManyChild;
		CREATE LASTCHILD OF Environment.getXTreeManyChild DOMAIN 'XMLNSC' NAME attribName;
		
		SET Environment.getXTreeManyChild.{attribName}[] = SELECT ITEM X
			FROM ref.[] AS X
			WHERE X.(XMLNSC.Attribute)xsi:type = attribName;
		MOVE ref TO Environment.getXTreeManyChild;
		END;			

END MODULE;
/***********************************************************************************************************************************************************************/
CREATE COMPUTE MODULE NZ_CalculatePremium_Response
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN

		CALL BuildCalculatePremiumResponseHdr();
		CALL BuildCalculatePremiumResponseBody();	
-- Set destination list		
		SET OutputLocalEnvironment.Destination.MQ.DestinationData.queueManagerName 	= Environment.REPLY_TO_QUEUE_MANAGER;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData.queueName 		= Environment.REPLY_TO_QUEUE;			
			
		RETURN TRUE;
	END;
/***********************************************************************************************************************************************************************/	
CREATE PROCEDURE BuildCalculatePremiumResponseHdr() BEGIN
		DECLARE refIn  REFERENCE TO InputRoot.MRM.RP_HEADER; 
-- Build MQMD					
 		CREATE NEXTSIBLING OF OutputRoot.Properties DOMAIN 'MQMD';
 		DECLARE refOut REFERENCE TO OutputRoot.MQMD;					
 		CALL Build_MQMD_Header (refOut, Environment.Msgid,Environment.REPLY_TO_QUEUE,Environment.REPLY_TO_QUEUE_MANAGER);			   
-- Create HTTP Header   		 
   		SET OutputRoot.HTTPReplyHeader					= Environment.HTTP;
-- Create Calculate Premium XML Response Header   		 
   		CREATE LASTCHILD OF OutputRoot AS refOut DOMAIN 'XMLNSC' NAME 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC AS refOut		NAMESPACE ser NAME 'CalculatePremiumResponseSoapOut';	
		CALL Build_XML_Response_Header (refOut, 'CALCULATE_PREMIUM', Environment.Header,refIn);					
END;
/***********************************************************************************************************************************************************************/
CREATE PROCEDURE BuildCalculatePremiumResponseBody() BEGIN

		DECLARE inRef 			REFERENCE TO InputRoot.MRM.RP_BODY.RP_REFERRALS.RP_REFERRAL_DTL;
		DECLARE inRefX 			REFERENCE TO InputRoot.MRM.RP_BODY.RP_REFERRALS_X.RP_REFERRAL_DTL_X;
		DECLARE inDisc			REFERENCE TO InputRoot.MRM.RP_BODY.RP_DISCOUNTS.RP_DISCOUNT_DTL;
		DECLARE inXS			REFERENCE TO InputRoot.MRM.RP_BODY.RP_EXCESSES.RP_EXCESS_DTL;
		DECLARE inDrvr			REFERENCE TO InputRoot.MRM.RP_BODY.RP_DRIVERS.RP_DRIVER_DTL;	
		DECLARE inPrem			REFERENCE TO InputRoot.MRM.RP_BODY.RP_PREMIUMS.RP_PREMIUM_DTL;
		DECLARE inEndorsement	REFERENCE TO InputRoot.MRM.RP_BODY.RP_CLAUSEV.RP_CLAUSEV_DTL;
		DECLARE ResponseRef 	REFERENCE TO OutputRoot.XMLNSC.ser:"CalculatePremiumResponseSoapOut";	
		DECLARE ResponseRefBase	REFERENCE TO OutputRoot.XMLNSC.ser:"CalculatePremiumResponseSoapOut";
		DECLARE DiscountIndex	INTEGER 1;
		DECLARE ReferralIndex	INTEGER 1;
		DECLARE PremiumIndex	INTEGER 1;
		DECLARE	DrvXSIndex		INTEGER 1;
		DECLARE PolXSIndex		INTEGER 1;	
		DECLARE EndorsementIndx	INTEGER 1;
		DECLARE Processed		CHAR 	'N';		
													
-- Skip if there is an error
	    IF InputRoot.MRM.RP_HEADER.RP_RC			= 04
	    	OR InputRoot.MRM.RP_HEADER.RP_RC		= 08
	    	OR InputRoot.MRM.RP_HEADER.RP_RC		= 16 THEN
	    ELSE			
-- Create xml parents for coverages	and policy holder and assessment  
			CREATE LASTCHILD OF ResponseRef AS ResponseRef 								NAME 'Payload';
			CREATE LASTCHILD OF ResponseRef AS ResponseRef 								NAME 'CalculatePremiumResponse';
			CREATE LASTCHILD OF ResponseRef AS ResponseRef 								NAMESPACE ns NAME 'insurancePolicy';
			SET ResponseRef.(XMLNSC.Attribute)xmlns										=ns;	
			CREATE LASTCHILD OF ResponseRef AS ResponseRef 								NAMESPACE ns NAME 'contractComponents';
			SET ResponseRef.(XMLNSC.Attribute)xsi:type									='CoverageComponent';	

-- Set renewal date			
  			CREATE LASTCHILD OF ResponseRef AS ResponseRef 								NAMESPACE ns NAME 'renewalDate'      	VALUE DateFunc.StrToDate(CAST(InputRoot.MRM.RP_BODY.RP_ASSESSMENT.RP_DUEDATE AS CHAR));			

			CREATE NEXTSIBLING OF ResponseRef AS ResponseRef 							NAMESPACE ns NAME 'contractComponents';
			SET ResponseRef.(XMLNSC.Attribute)xsi:type									='AutomobileCoverage';	
			
-- build driver referrals 		
			IF InputRoot.MRM.RP_BODY.RP_REFERRALS.RP_REFERRAL_CNT = 0 THEN
			ELSE
				WHILE ReferralIndex <= InputRoot.MRM.RP_BODY.RP_REFERRALS.RP_REFERRAL_CNT DO
					
					IF inRef.RP_OWNER_DRIVER = 'D' THEN	 
						MOVE ResponseRefBase TO ResponseRef;
						CREATE LASTCHILD OF ResponseRefBase	AS ResponseRefBase			NAMESPACE ns  NAME 'rolesInContract';
						SET ResponseRefBase.(XMLNSC.Attribute)xsi:type					='NamedDriver';
						CREATE LASTCHILD OF ResponseRefBase.ns:objectReference 			NAMESPACE ns  NAME 'objectId' 			VALUE inRef.RP_DRIVERSEQ;	
						CREATE LASTCHILD OF ResponseRefBase 							NAMESPACE ns  NAME 'rejectionReason' 	VALUE inRef.RP_REASON;	
					END IF;	

					SET ReferralIndex = ReferralIndex + 1;					
					MOVE inRef NEXTSIBLING REPEAT NAME;			
				END WHILE;
			END IF;	  							

			IF InputRoot.MRM.RP_BODY.RP_REFERRALS_X.RP_REFERRAL_X_CNT = 0 THEN
			ELSE
				SET ReferralIndex = 1;	
				WHILE ReferralIndex <= InputRoot.MRM.RP_BODY.RP_REFERRALS_X.RP_REFERRAL_X_CNT DO
					
					IF inRefX.RP_OWNER_DRIVER_X = 'D' THEN	 
						MOVE ResponseRefBase TO ResponseRef;
						CREATE LASTCHILD OF ResponseRefBase	AS ResponseRefBase			NAMESPACE ns  NAME 'rolesInContract';
						SET ResponseRefBase.(XMLNSC.Attribute)xsi:type					='NamedDriver';
						CREATE LASTCHILD OF ResponseRefBase.ns:objectReference 			NAMESPACE ns  NAME 'objectId' 			VALUE inRefX.RP_DRIVERSEQ_X;	
						CREATE LASTCHILD OF ResponseRefBase 							NAMESPACE ns  NAME 'rejectionReason' 	VALUE inRefX.RP_REASON_X;	
					END IF;	

					SET ReferralIndex = ReferralIndex + 1;					
					MOVE inRefX NEXTSIBLING REPEAT NAME;			
				END WHILE;
			END IF;	  							

			MOVE ResponseRef TO 				OutputRoot.XMLNSC.ser:"CalculatePremiumResponseSoapOut".Payload.CalculatePremiumResponse.ns:insurancePolicy.ns:contractComponents;					

-- build Clauses (Endorsements)

			IF InputRoot.MRM.RP_BODY.RP_CLAUSEV.RP_CLAUSEV_CNT = 0 THEN
			ELSE
				WHILE EndorsementIndx <= InputRoot.MRM.RP_BODY.RP_CLAUSEV.RP_CLAUSEV_CNT DO
					MOVE ResponseRefBase TO ResponseRef;
					CREATE LASTCHILD OF ResponseRefBase	AS ResponseRefBase				NAMESPACE ns  	NAME 'contractClauses';
					SET ResponseRefBase.(XMLNSC.Attribute)xsi:type						='CompositeTextBlock';
					CREATE LASTCHILD OF ResponseRefBase	AS ResponseRefBase				NAMESPACE ns  	NAME 'standardTextSpecifications';
					SET ResponseRefBase.(XMLNSC.Attribute)xsi:type						='StaticTextBlock';
					
					CREATE LASTCHILD OF ResponseRefBase.ns:objectReference 				NAMESPACE ns  	NAME 'objectId' 	VALUE inEndorsement.RP_SCHREF;	
					CREATE LASTCHILD OF ResponseRefBase									NAMESPACE ns  	NAME 'description'  VALUE inEndorsement.RP_SCHREF_DESC;	

					SET EndorsementIndx = EndorsementIndx + 1;					
					MOVE inEndorsement NEXTSIBLING REPEAT NAME;			
				END WHILE;
			END IF;	  							

			MOVE ResponseRef TO 				OutputRoot.XMLNSC.ser:"CalculatePremiumResponseSoapOut".Payload.CalculatePremiumResponse.ns:insurancePolicy.ns:contractComponents;					

-- build discounts		
			IF InputRoot.MRM.RP_BODY.RP_DISCOUNTS.RP_DISCOUNT_CNT = 0 THEN
			ELSE
				CREATE LASTCHILD OF ResponseRef AS ResponseRef 							NAMESPACE ns 	NAME 'rolesInContract';
				SET ResponseRef.(XMLNSC.Attribute)xsi:type								='MoneyProvisionInvolvedInContract';	
				CREATE LASTCHILD OF ResponseRef AS ResponseRef 							NAMESPACE ns 	NAME 'moneyProvision';
				SET ResponseRef.(XMLNSC.Attribute)xsi:type								='GenericMoneyProvision';

				WHILE DiscountIndex <= InputRoot.MRM.RP_BODY.RP_DISCOUNTS.RP_DISCOUNT_CNT DO
						MOVE ResponseRefBase TO ResponseRef;
						
						CREATE LASTCHILD OF ResponseRefBase	AS ResponseRefBase			NAMESPACE ns 	NAME 'adjustments';
						IF inDisc.RP_DISCOUNT_AMOUNT <> 0 THEN
							CREATE LASTCHILD OF ResponseRefBase 			 			NAMESPACE ns 	NAME 'amount';
							CREATE LASTCHILD OF ResponseRefBase.ns:amount				NAMESPACE ns 	NAME 'theAmount'	VALUE inDisc.RP_DISCOUNT_AMOUNT;		
						END IF;
						IF inDisc.RP_DISCOUNT_PERCENT <> 0 THEN
							CREATE LASTCHILD OF ResponseRefBase 			 			NAMESPACE ns 	NAME 'factor'		VALUE inDisc.RP_DISCOUNT_PERCENT;	
						END IF;
						IF inDisc.RP_DISCOUNT_NAME = 'NCDL' THEN
	        				CREATE LASTCHILD OF ResponseRefBase  						NAMESPACE ns 	NAME 'reason'  		VALUE 'No Claims For Life';
						END IF;	
						IF inDisc.RP_DISCOUNT_NAME = 'MPD' THEN		
        					CREATE LASTCHILD OF ResponseRefBase  						NAMESPACE ns 	NAME 'reason'  		VALUE 'Multi Policy';
						END IF;
						IF inDisc.RP_DISCOUNT_NAME = 'NCD' THEN
		        			CREATE LASTCHILD OF ResponseRefBase  						NAMESPACE ns 	NAME 'reason'  		VALUE 'No Claims';
						END IF;
						IF inDisc.RP_DISCOUNT_NAME = 'IMMOB' THEN
		        			CREATE LASTCHILD OF ResponseRefBase 		 				NAMESPACE ns 	NAME 'reason'  		VALUE 'Immobiliser';
						END IF;									
	
					SET DiscountIndex = DiscountIndex + 1;
					MOVE inDisc NEXTSIBLING REPEAT NAME;	
				END WHILE;

				MOVE ResponseRef TO 				OutputRoot.XMLNSC.ser:"CalculatePremiumResponseSoapOut".Payload.CalculatePremiumResponse.ns:insurancePolicy.ns:contractComponents.ns:rolesInContract;					
				MOVE ResponseRefBase TO ResponseRef;
		
				CREATE LASTCHILD OF ResponseRefBase 										NAMESPACE ns NAME 'rootType';				
				CREATE LASTCHILD OF ResponseRefBase.ns:rootType								NAMESPACE ns NAME 'name' 		VALUE 'Discount';
						
			END IF;	

-- build policy excesses		
			IF InputRoot.MRM.RP_BODY.RP_EXCESSES.RP_EXCESS_CNT = 0 THEN
			ELSE
				
/* BKMOD */		MOVE ResponseRef TO 				OutputRoot.XMLNSC.ser:"CalculatePremiumResponseSoapOut".Payload.CalculatePremiumResponse.ns:insurancePolicy.ns:contractComponents;					
/* BKMOD */		CREATE LASTCHILD OF ResponseRef	AS ResponseRef					NAMESPACE ns 	NAME 'rolesInContract';
				
				WHILE PolXSIndex <= InputRoot.MRM.RP_BODY.RP_EXCESSES.RP_EXCESS_CNT DO

/* BKMOD				MOVE ResponseRef TO 				OutputRoot.XMLNSC.ser:"CalculatePremiumResponseSoapOut".Payload.CalculatePremiumResponse.ns:insurancePolicy.ns:contractComponents;					
						
						CREATE LASTCHILD OF ResponseRef	AS ResponseRef					NAMESPACE ns 	NAME 'rolesInContract'; */
						SET ResponseRef.(XMLNSC.Attribute)xsi:type						='MoneyProvisionInvolvedInContract';	

						MOVE ResponseRefBase TO ResponseRef;
						
						CREATE LASTCHILD OF ResponseRefBase AS ResponseRefBase 			NAMESPACE ns 	NAME 'moneyProvision';
						SET ResponseRefBase.(XMLNSC.Attribute)xsi:type					='GenericMoneyProvision';

						CREATE LASTCHILD OF ResponseRefBase AS ResponseRefBase			NAMESPACE ns 	NAME 'deductible';
						SET ResponseRefBase.(XMLNSC.Attribute)xsi:type					='Deductible';	
												    																					
						IF inXS.RP_EXCESS_AMOUNT <> 0 THEN
							CREATE LASTCHILD OF ResponseRefBase 		 				NAMESPACE ns 	NAME 'minimumAmount';
							CREATE LASTCHILD OF ResponseRefBase.ns:minimumAmount 		NAMESPACE ns 	NAME 'theAmount'	VALUE inXS.RP_EXCESS_AMOUNT;																		
						END IF;
						IF inXS.RP_EXCESS_NAME = 'BASIC' THEN
	        				CREATE LASTCHILD OF ResponseRefBase 						NAMESPACE ns 	NAME 'name'  		VALUE 'Basic';
						END IF;	
						IF inXS.RP_EXCESS_NAME = 'INEXP' THEN		
        					CREATE LASTCHILD OF ResponseRefBase 						NAMESPACE ns 	NAME 'name'  		VALUE 'Inexperienced Driver';
						END IF;
						IF inXS.RP_EXCESS_NAME = 'AGE<21' THEN
		        			CREATE LASTCHILD OF ResponseRefBase 						NAMESPACE ns 	NAME 'name'  		VALUE 'Age<21';
						END IF;
						IF inXS.RP_EXCESS_NAME = 'AGE21-24' THEN
		        			CREATE LASTCHILD OF ResponseRefBase 						NAMESPACE ns 	NAME 'name'  		VALUE 'Age21-24';
						END IF;
						IF inXS.RP_EXCESS_NAME = 'AGE>24' THEN
		        			CREATE LASTCHILD OF ResponseRefBase 						NAMESPACE ns 	NAME 'name'  		VALUE 'Age>24';
						END IF;
						IF inXS.RP_EXCESS_NAME = 'AGE' THEN
		        			CREATE LASTCHILD OF ResponseRefBase 						NAMESPACE ns 	NAME 'name'  		VALUE 'Age';
						END IF;
						IF inXS.RP_EXCESS_NAME = 'THEFT' THEN
		        			CREATE LASTCHILD OF ResponseRefBase 						NAMESPACE ns 	NAME 'name'  		VALUE 'Theft';
						END IF;	
/* BKMOD						CREATE LASTCHILD OF ResponseRef AS ResponseRef					NAMESPACE ns 	NAME 'rootType';				
						CREATE LASTCHILD OF ResponseRef									NAMESPACE ns 	NAME 'name' 		VALUE 'Excess'; */
													
						SET PolXSIndex = PolXSIndex + 1;
						MOVE inXS NEXTSIBLING REPEAT NAME;	
				END WHILE;
				
/* BKMOD */		CREATE LASTCHILD OF ResponseRef AS ResponseRef					NAMESPACE ns 	NAME 'rootType';				
/* BKMOD */		CREATE LASTCHILD OF ResponseRef									NAMESPACE ns 	NAME 'name' 		VALUE 'Excess';				
			END IF;	  							

-- build driver excesses		
			IF InputRoot.MRM.RP_BODY.RP_DRIVERS.RP_DRIVER_CNT = 0 THEN
			ELSE				
				WHILE DrvXSIndex <= InputRoot.MRM.RP_BODY.RP_DRIVERS.RP_DRIVER_CNT DO
					IF inDrvr.RP_SPECIALXS <> 0 THEN
/* BKMOD */				IF Processed = 'N' THEN
/* BKMOD */					SET Processed = 'Y';
							MOVE ResponseRef TO 				OutputRoot.XMLNSC.ser:"CalculatePremiumResponseSoapOut".Payload.CalculatePremiumResponse.ns:insurancePolicy.ns:contractComponents;											
							CREATE LASTCHILD OF ResponseRef	AS ResponseRef					NAMESPACE ns 	NAME 'rolesInContract';
/* BKMOD */				END IF;	
							
						SET ResponseRef.(XMLNSC.Attribute)xsi:type						='MoneyProvisionInvolvedInContract';	

						MOVE ResponseRefBase TO ResponseRef;
						
						CREATE LASTCHILD OF ResponseRefBase AS ResponseRefBase 			NAMESPACE ns 	NAME 'moneyProvision';
						SET ResponseRefBase.(XMLNSC.Attribute)xsi:type					='GenericMoneyProvision';

						CREATE LASTCHILD OF ResponseRefBase AS ResponseRefBase			NAMESPACE ns 	NAME 'deductible';
						SET ResponseRefBase.(XMLNSC.Attribute)xsi:type					='Deductible';
							    																					
						CREATE LASTCHILD OF ResponseRefBase 		 					NAMESPACE ns 	NAME 'minimumAmount';
						CREATE LASTCHILD OF ResponseRefBase.ns:minimumAmount 			NAMESPACE ns 	NAME 'theAmount'	VALUE inDrvr.RP_SPECIALXS;
																								
	        			CREATE LASTCHILD OF ResponseRefBase 							NAMESPACE ns 	NAME 'name'  		VALUE 'Driver';
	        			CREATE LASTCHILD OF ResponseRefBase AS ResponseRefBase			NAMESPACE ns 	NAME 'rolesInDeductible';
						SET ResponseRefBase.(XMLNSC.Attribute)xsi:type					='PartyRole';
						
	        			CREATE LASTCHILD OF ResponseRefBase								NAMESPACE ns 	NAME 'objectReference';
	        			CREATE LASTCHILD OF ResponseRefBase.ns:objectReference			NAMESPACE ns 	NAME 'objectId'		VALUE inDrvr.RP_DRIVERSEQ;
							
/* BKMOD				CREATE LASTCHILD OF ResponseRef AS ResponseRef					NAMESPACE ns 	NAME 'rootType';				
						CREATE LASTCHILD OF ResponseRef									NAMESPACE ns 	NAME 'name' 		VALUE 'Excess'; */
													
					END IF;	
					
						SET DrvXSIndex = DrvXSIndex + 1;					
						MOVE inDrvr NEXTSIBLING REPEAT NAME;	
				END WHILE;
				
/* BKMOD */		IF Processed = 'Y' THEN				
/* BKMOD */			CREATE LASTCHILD OF ResponseRef AS ResponseRef					NAMESPACE ns 	NAME 'rootType';				
/* BKMOD */			CREATE LASTCHILD OF ResponseRef									NAMESPACE ns 	NAME 'name' 		VALUE 'Excess';
/* BKMOD */		END IF;	
			END IF;	  							

-- build premiums		
			IF InputRoot.MRM.RP_BODY.RP_PREMIUMS.RP_PREMIUM_CNT = 0 THEN
			ELSE
				WHILE PremiumIndex <= InputRoot.MRM.RP_BODY.RP_PREMIUMS.RP_PREMIUM_CNT DO
						MOVE ResponseRef TO 				OutputRoot.XMLNSC.ser:"CalculatePremiumResponseSoapOut".Payload.CalculatePremiumResponse.ns:insurancePolicy.ns:contractComponents;					
						
						CREATE LASTCHILD OF ResponseRef	AS ResponseRef					NAMESPACE ns 	NAME 'rolesInContract';
						SET ResponseRef.(XMLNSC.Attribute)xsi:type						='MoneyProvisionInvolvedInContract';	

						MOVE ResponseRefBase TO ResponseRef;
						
						CREATE LASTCHILD OF ResponseRefBase AS ResponseRefBase 			NAMESPACE ns 	NAME 'moneyProvision';
						SET ResponseRefBase.(XMLNSC.Attribute)xsi:type					='ParticularMoneyProvision';

						CREATE LASTCHILD OF ResponseRefBase AS ResponseRefBase			NAMESPACE ns 	NAME 'moneyScheduler';
						SET ResponseRefBase.(XMLNSC.Attribute)xsi:type					='MoneyInScheduler';

						IF inPrem.RP_BILLPLAN = 'NANN' THEN  					    																					
							CREATE LASTCHILD OF ResponseRefBase					 		NAMESPACE ns 	NAME 'frequency'	VALUE 'Yearly';
						END IF;		
						IF inPrem.RP_BILLPLAN = 'NMTH' THEN  		    																					
							CREATE LASTCHILD OF ResponseRefBase					 		NAMESPACE ns 	NAME 'frequency'	VALUE 'Monthly';
						END IF;
						IF inPrem.RP_BILLPLAN = 'NFOR' THEN					    																					
							CREATE LASTCHILD OF ResponseRefBase					 		NAMESPACE ns 	NAME 'frequency'	VALUE 'Fortnightly';
						END IF;	
						
						MOVE ResponseRefBase TO ResponseRef.ns:moneyProvision;

	        			CREATE LASTCHILD OF ResponseRefBase AS ResponseRefBase			NAMESPACE ns 	NAME 'moneyProvisionElements';
						
	        			CREATE LASTCHILD OF ResponseRefBase	AS ResponseRefBase			NAMESPACE ns 	NAME 'baseAmount';
	        			CREATE LASTCHILD OF ResponseRefBase								NAMESPACE ns 	NAME 'theAmount'	VALUE inPrem.RP_GROSS;

						MOVE ResponseRefBase TO ResponseRef.ns:moneyProvision.ns:moneyProvisionElements;
							
						CREATE LASTCHILD OF ResponseRefBase AS ResponseRefBase			NAMESPACE ns 	NAME 'moneyProvisionElementParts';				
						CREATE LASTCHILD OF ResponseRefBase								NAMESPACE ns 	NAME 'amount';
						CREATE LASTCHILD OF ResponseRefBase.ns:amount					NAMESPACE ns 	NAME 'theAmount'	VALUE inPrem.RP_BASIC;
						CREATE LASTCHILD OF ResponseRefBase	AS ResponseRefBase			NAMESPACE ns 	NAME 'rootType';				
						CREATE LASTCHILD OF ResponseRefBase								NAMESPACE ns 	NAME 'name' 		VALUE 'Company Written Premium';

						MOVE ResponseRefBase TO ResponseRef.ns:moneyProvision.ns:moneyProvisionElements;
							
						CREATE LASTCHILD OF ResponseRefBase AS ResponseRefBase			NAMESPACE ns 	NAME 'moneyProvisionElementParts';				
						CREATE LASTCHILD OF ResponseRefBase								NAMESPACE ns 	NAME 'amount';
						CREATE LASTCHILD OF ResponseRefBase.ns:amount					NAMESPACE ns 	NAME 'theAmount'	VALUE inPrem.RP_FSL;
						CREATE LASTCHILD OF ResponseRefBase	AS ResponseRefBase			NAMESPACE ns 	NAME 'rootType';				
						CREATE LASTCHILD OF ResponseRefBase								NAMESPACE ns 	NAME 'name' 		VALUE 'Fire Service Levy';

						MOVE ResponseRefBase TO ResponseRef.ns:moneyProvision.ns:moneyProvisionElements;
							
						CREATE LASTCHILD OF ResponseRefBase AS ResponseRefBase			NAMESPACE ns 	NAME 'moneyProvisionElementParts';				
						CREATE LASTCHILD OF ResponseRefBase								NAMESPACE ns 	NAME 'amount';
						CREATE LASTCHILD OF ResponseRefBase.ns:amount					NAMESPACE ns 	NAME 'theAmount'	VALUE inPrem.RP_GST;
						CREATE LASTCHILD OF ResponseRefBase	AS ResponseRefBase			NAMESPACE ns 	NAME 'rootType';				
						CREATE LASTCHILD OF ResponseRefBase								NAMESPACE ns 	NAME 'name' 		VALUE 'GST';

						MOVE ResponseRefBase TO ResponseRef;

						CREATE LASTCHILD OF ResponseRefBase AS ResponseRefBase			NAMESPACE ns 	NAME 'rootType';				
						CREATE LASTCHILD OF ResponseRefBase								NAMESPACE ns 	NAME 'name' 		VALUE 'Annual Premium';

-- 				output instalment info for monthly and fortnightly plans						
						IF inPrem.RP_BILLPLAN = 'NMTH' OR inPrem.RP_BILLPLAN = 'NFOR' THEN  		
							
							MOVE ResponseRef TO 				OutputRoot.XMLNSC.ser:"CalculatePremiumResponseSoapOut".Payload.CalculatePremiumResponse.ns:insurancePolicy.ns:contractComponents;					
						
							CREATE LASTCHILD OF ResponseRef	AS ResponseRef				NAMESPACE ns 	NAME 'rolesInContract';
							SET ResponseRef.(XMLNSC.Attribute)xsi:type					='MoneyProvisionInvolvedInContract';	

							MOVE ResponseRefBase TO ResponseRef;
						
							CREATE LASTCHILD OF ResponseRefBase AS ResponseRefBase 		NAMESPACE ns 	NAME 'moneyProvision';
							SET ResponseRefBase.(XMLNSC.Attribute)xsi:type				='ParticularMoneyProvision';

							CREATE LASTCHILD OF ResponseRefBase AS ResponseRefBase		NAMESPACE ns 	NAME 'moneyScheduler';
							SET ResponseRefBase.(XMLNSC.Attribute)xsi:type				='MoneyInScheduler';

							IF inPrem.RP_BILLPLAN = 'NMTH' THEN  		    																					
								CREATE LASTCHILD OF ResponseRefBase					 	NAMESPACE ns 	NAME 'frequency'	VALUE 'Monthly';
							END IF;
							IF inPrem.RP_BILLPLAN = 'NFOR' THEN					    																					
								CREATE LASTCHILD OF ResponseRefBase					 	NAMESPACE ns 	NAME 'frequency'	VALUE 'Fortnightly';
							END IF;	
						
							MOVE ResponseRefBase TO ResponseRef.ns:moneyProvision;	

							CREATE LASTCHILD OF ResponseRefBase AS ResponseRefBase		NAMESPACE ns 	NAME 'moneyProvisionElements';				
							CREATE LASTCHILD OF ResponseRefBase							NAMESPACE ns 	NAME 'baseAmount';
							CREATE LASTCHILD OF ResponseRefBase.ns:baseAmount			NAMESPACE ns 	NAME 'theAmount'	VALUE inPrem.RP_FIRST_INSTLMNT;
							CREATE LASTCHILD OF ResponseRefBase	AS ResponseRefBase		NAMESPACE ns 	NAME 'rootType';				
							CREATE LASTCHILD OF ResponseRefBase							NAMESPACE ns 	NAME 'name' 		VALUE 'Initial Instalment';	
	
							MOVE ResponseRefBase TO ResponseRef.ns:moneyProvision;
							
							CREATE LASTCHILD OF ResponseRefBase AS ResponseRefBase		NAMESPACE ns 	NAME 'moneyProvisionElements';				
							CREATE LASTCHILD OF ResponseRefBase							NAMESPACE ns 	NAME 'baseAmount';
							CREATE LASTCHILD OF ResponseRefBase.ns:baseAmount			NAMESPACE ns 	NAME 'theAmount'	VALUE inPrem.RP_REGLR_INSTLMNT;
							CREATE LASTCHILD OF ResponseRefBase	AS ResponseRefBase		NAMESPACE ns 	NAME 'rootType';				
							CREATE LASTCHILD OF ResponseRefBase							NAMESPACE ns 	NAME 'name' 		VALUE 'Instalment';

							MOVE ResponseRefBase TO ResponseRef;

							CREATE LASTCHILD OF ResponseRefBase AS ResponseRefBase		NAMESPACE ns 	NAME 'rootType';				
							CREATE LASTCHILD OF ResponseRefBase							NAMESPACE ns 	NAME 'name' 		VALUE 'Instalment Premium';
							    																					
						END IF;	

						SET PremiumIndex = PremiumIndex + 1;					
						MOVE inPrem NEXTSIBLING REPEAT NAME;	
				END WHILE;
			END IF;	  							

-- build policy holder referrals 		
			IF InputRoot.MRM.RP_BODY.RP_REFERRALS.RP_REFERRAL_CNT = 0 THEN
			ELSE
				SET ReferralIndex = 1;	
				MOVE ResponseRef TO 				OutputRoot.XMLNSC.ser:"CalculatePremiumResponseSoapOut".Payload.CalculatePremiumResponse.ns:insurancePolicy;					
				MOVE inRef TO InputRoot.MRM.RP_BODY.RP_REFERRALS.RP_REFERRAL_DTL;
					
				WHILE ReferralIndex <= InputRoot.MRM.RP_BODY.RP_REFERRALS.RP_REFERRAL_CNT DO
					IF inRef.RP_OWNER_DRIVER = 'O' THEN	
						MOVE ResponseRefBase TO ResponseRef;
						CREATE LASTCHILD OF ResponseRefBase AS ResponseRefBase		NAMESPACE ns  NAME 'rolesInContract';
						SET ResponseRefBase.(XMLNSC.Attribute)xsi:type				='Policyholder';
						CREATE LASTCHILD OF ResponseRefBase.ns:objectReference 		NAMESPACE ns  NAME 'objectId' 			VALUE inRef.RP_DRIVERSEQ;	
						CREATE LASTCHILD OF ResponseRefBase							NAMESPACE ns  NAME 'rejectionReason' 	VALUE inRef.RP_REASON;	
					END IF;	

					SET ReferralIndex = ReferralIndex + 1;					
					MOVE inRef NEXTSIBLING REPEAT NAME;			
				END WHILE;
			END IF;	  							

			IF InputRoot.MRM.RP_BODY.RP_REFERRALS_X.RP_REFERRAL_X_CNT = 0 THEN
			ELSE
				SET ReferralIndex = 1;	
				MOVE ResponseRef TO 				OutputRoot.XMLNSC.ser:"CalculatePremiumResponseSoapOut".Payload.CalculatePremiumResponse.ns:insurancePolicy;					
				MOVE inRefX TO InputRoot.MRM.RP_BODY.RP_REFERRALS_X.RP_REFERRAL_DTL_X;
					
				WHILE ReferralIndex <= InputRoot.MRM.RP_BODY.RP_REFERRALS_X.RP_REFERRAL_X_CNT DO
					IF inRefX.RP_OWNER_DRIVER_X = 'O' THEN	
						MOVE ResponseRefBase TO ResponseRef;
						CREATE LASTCHILD OF ResponseRefBase AS ResponseRefBase		NAMESPACE ns  NAME 'rolesInContract';
						SET ResponseRefBase.(XMLNSC.Attribute)xsi:type				='Policyholder';
						CREATE LASTCHILD OF ResponseRefBase.ns:objectReference 		NAMESPACE ns  NAME 'objectId' 			VALUE inRefX.RP_DRIVERSEQ_X;	
						CREATE LASTCHILD OF ResponseRefBase							NAMESPACE ns  NAME 'rejectionReason' 	VALUE inRefX.RP_REASON_X;	
					END IF;	

					SET ReferralIndex = ReferralIndex + 1;					
					MOVE inRefX NEXTSIBLING REPEAT NAME;			
				END WHILE;
			END IF;	  							

			MOVE ResponseRef TO 													OutputRoot.XMLNSC.ser:"CalculatePremiumResponseSoapOut".Payload.CalculatePremiumResponse;
			CREATE LASTCHILD OF ResponseRef	AS ResponseRef							NAMESPACE ns 	NAME 'assessmentResults';	
			SET ResponseRef.(XMLNSC.Attribute)xmlns									=ns;	
			MOVE ResponseRef TO		 												OutputRoot.XMLNSC.ser:"CalculatePremiumResponseSoapOut".Payload.CalculatePremiumResponse.ns:assesmentResults;

						
-- build general referrals (not for a specific driver)		
			IF InputRoot.MRM.RP_BODY.RP_REFERRALS.RP_REFERRAL_CNT = 0 THEN
			ELSE
				SET ReferralIndex = 1;	
				MOVE inRef TO InputRoot.MRM.RP_BODY.RP_REFERRALS.RP_REFERRAL_DTL;	
				
				WHILE ReferralIndex <= InputRoot.MRM.RP_BODY.RP_REFERRALS.RP_REFERRAL_CNT DO
					IF inRef.RP_OWNER_DRIVER = ' ' THEN	 
						MOVE ResponseRefBase TO ResponseRef;
						CREATE LASTCHILD OF ResponseRefBase							NAMESPACE ns  NAME 'description' 	VALUE inRef.RP_REASON;	
					END IF;	

					SET ReferralIndex = ReferralIndex + 1;					
					MOVE inRef NEXTSIBLING REPEAT NAME;			
				END WHILE;
			END IF;	  							

			IF InputRoot.MRM.RP_BODY.RP_REFERRALS_X.RP_REFERRAL_X_CNT = 0 THEN
			ELSE
				SET ReferralIndex = 1;	
				MOVE inRefX TO InputRoot.MRM.RP_BODY.RP_REFERRALS_X.RP_REFERRAL_DTL_X;	
				
				WHILE ReferralIndex <= InputRoot.MRM.RP_BODY.RP_REFERRALS_X.RP_REFERRAL_X_CNT DO
					IF inRefX.RP_OWNER_DRIVER_X = ' ' THEN	 
						MOVE ResponseRefBase TO ResponseRef;
						CREATE LASTCHILD OF ResponseRefBase							NAMESPACE ns  NAME 'description' 	VALUE inRefX.RP_REASON_X;	
					END IF;	

					SET ReferralIndex = ReferralIndex + 1;					
					MOVE inRefX NEXTSIBLING REPEAT NAME;			
				END WHILE;
			END IF;	  							

-- Is the quote accepted or are there referrals
			SET ResponseRef.ns:accepted = 
		  	  CASE InputRoot.MRM.RP_BODY.RP_ASSESSMENT.RP_ACCEPTED
		    	WHEN 'Y'  THEN TRUE
		    	WHEN 'N'  THEN FALSE		    		
		  	  END;			         			
		END IF; 		
	END;    
END MODULE;
/***********************************************************************************************************************************************************************/
CREATE COMPUTE MODULE NZ_CalculatePremium_Error
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN	
		DECLARE start 			REFERENCE TO InputExceptionList.*[1];	  
-- Create HTTP Header   		 
   		SET OutputRoot.HTTPReplyHeader						= Environment.HTTP;	
-- Build MQMD					
 		CREATE NEXTSIBLING OF OutputRoot.Properties DOMAIN 'MQMD';
 		DECLARE refOut REFERENCE TO OutputRoot.MQMD;					
 		CALL Build_MQMD_Header (refOut, Environment.Msgid,Environment.REPLY_TO_QUEUE,Environment.REPLY_TO_QUEUE_MANAGER);	
-- HTTP Header		
		SET Environment.HTTP											= InputRoot.HTTPInputHeader;		
		SET OutputRoot.XMLNSC.ser:"CalculatePremiumResponseSoapOut".ResponseHeader.Header 						= InputRoot.XMLNSC.ser:CalculatePremiumSoapIn.Header;
		SET OutputRoot.XMLNSC.ser:"CalculatePremiumResponseSoapOut".ResponseHeader.maxReturnLevel 				= 'ERROR';
		SET OutputRoot.XMLNSC.ser:"CalculatePremiumResponseSoapOut".ResponseHeader.errorList.errorInfo.level 	= 'ERROR';
		SET OutputRoot.XMLNSC.ser:"CalculatePremiumResponseSoapOut".ResponseHeader.errorList.errorInfo.system 	= 'WMB';				
-- Map Error code in ResponseHeader 		
		WHILE start.Number IS NOT NULL DO 
			IF start.Number = 3002 THEN		
				SET OutputRoot.XMLNSC.ser:"CalculatePremiumResponseSoapOut".ResponseHeader.errorList.errorInfo.code 		= 'PE03';
				SET OutputRoot.XMLNSC.ser:"CalculatePremiumResponseSoapOut".ResponseHeader.errorList.errorInfo.message 		= 'Calculate Premium Timeout';				
			ELSE	
				SET OutputRoot.XMLNSC.ser:"CalculatePremiumResponseSoapOut".ResponseHeader.errorList.errorInfo.code 		= 'PE04';
				SET OutputRoot.XMLNSC.ser:"CalculatePremiumResponseSoapOut".ResponseHeader.errorList.errorInfo.message 		= 'Calculate Premium Call Exception';
			END IF;
-- Move start to the last child of the field to which it currently points 
				MOVE start LASTCHILD;
		END WHILE;					
-- 	Set destination				
		SET OutputLocalEnvironment.Destination.MQ.DestinationData.queueManagerName 	= InputRoot.MQMD.ReplyToQMgr;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData.queueName 		= InputRoot.MQMD.ReplyToQ;	

	END;
END MODULE; 
/***********************************************************************************************************************************************************************/



